const Account = require('../../controllers/account');
const Source = require('../../controllers/source');
const Task = require('../../controllers/task');
const instanode = require('../../../bin/instanode');

module.exports = (event, state, log, map, send) => {

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    event.on('actions', (msg, action, next) => {
        Account.list(msg.from.id)
            .then(accounts => {
                let elements = accounts.map((item) => item.login);
                send.keyboard(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç', [...elements, '–ù–∞–∑–∞–¥']);
                next ? next() : null
            })

            // –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
            .catch(err => {
                send.keyboard(msg.from.id, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞', ['–ù–∞–∑–∞–¥'])
                next ? next() : null
            })
    });

    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ê–∫–∫–∞—É–Ω—Ç–∞
    event.on('actions:account', async (msg, action, next) => {
        try {
            let account = await Account.contains(msg.from.id, msg.text);
            let task = await Task.current(msg.from.id, msg.text);

            let text = '';
            let daily = '';

            switch (task.type){
                case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
                    daily = Math.round((task.params.actionFollow - task.params.following.length) / task.params.actionFollowDay);
                    text = `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${task.login}\n–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${task.params.actionFollow}/${task.params.following.length}\n–ü–æ–¥–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å: ${task.params.actionFollowDay}\n–õ–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å: ${task.params.actionLikeDay}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.params.source}\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${daily} –¥–Ω–µ–π`;
                    break;

                case '–û—Ç–ø–∏—Å–∫–∞':
                    daily = Math.round((task.params.following.length - task.params.unFollowing.length) / task.params.actionFollowingDay);
                    text = `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${task.login}\n–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.type}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${task.params.following.length}/${task.params.unFollowing.length}\n–û—Ç–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å: ${task.params.actionFollowingDay}\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${daily} –¥–Ω–µ–π`;
                    break;

                default:
                    break
            }

            send.keyboard(msg.from.id, text, ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å', '–ù–∞–∑–∞–¥']);
            next ? next() : null
        } catch (err){
            send.message(msg.from.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
            next ? next() : null;

            event.emit('location:back', msg);
        }
    });

    // –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
    event.on('actions:account:cancel', async (msg, action, next) => {
        try {
            let data = state[msg.from.id];
            let account = await Account.contains(msg.from.id, data[1]);
            let task = await Task.current(msg.from.id, data[1]);

            Task.cancel(task._id);
            send.message(msg.from.id, `üî¥ –ó–∞–¥–∞–Ω–∏–µ ${task.type} –æ—Ç–º–µ–Ω–µ–Ω–∞`);

            event.emit('location:back', msg);
        } catch (err){
            send.message(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ');
            next ? next() : null;

            event.emit('location:back', msg);
        }
    });

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    event.on('actions:account:update', async (msg, action, next) => {
        try {
            let account = await Account.contains(msg.from.id, state[msg.from.id][1]);
            let task = await Task.current(msg.from.id, account.login);

            switch (task.type){
                case '–û—Ç–ø–∏—Å–∫–∞':
                    send.keyboard(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –æ—Ç–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å', ['–ù–∞–∑–∞–¥']);
                    next();
                    break;

                case '–õ–∞–π–∫ + –ü–æ–¥–ø–∏—Å–∫–∞':
                    send.message(msg.from.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    throw new Error('–ü–æ–∫–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
                    break;

                default:
                    throw new Error('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!');
                    break;
            }

        } catch (err){
            event.emit('location:back', msg);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–µ—Ä–≤—ã–π —à–∞–≥
    event.on('actions:account:update:one', async (msg, action, next) => {
        try {
            let account = await Account.contains(msg.from.id, state[msg.from.id][1]);
            let task = await Task.current(msg.from.id, account.login);

            switch (task.type){
                case '–û—Ç–ø–∏—Å–∫–∞':
                    let action = parseInt(msg.text);
                    if (isNaN(action)){
                        send.message(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
                        return false;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª. –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –¥–µ–Ω—å
                    Task.updateActionDayUnFollowing(task._id, msg.text);
                    send.message(msg.from.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

                    event.emit('location:back', msg);
                    break;

                default:
                    throw new Error('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!');
                    break;
            }

        } catch (err){
            event.emit('location:back', msg);
        }
    });
};